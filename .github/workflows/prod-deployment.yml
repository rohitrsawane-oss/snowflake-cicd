name: Deploy to Production

on:
  push:
    branches: [ main ]
    paths:
      - 'scripts/prod/**'
      - 'config/prod.yml'
  # Optional: Add manual trigger
  workflow_dispatch:
    inputs:
      skip_validation:
        description: 'Skip post-deployment validation'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      deployment_type:
        description: 'Type of deployment'
        required: false
        default: 'full'
        type: choice
        options:
          - 'full'
          - 'ddl-only'
          - 'procedures-only'

jobs:
  pre-deployment-checks:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Validate Required Files
      run: |
        echo "üîç Checking repository structure..."
        
        # Check if config file exists
        if [ -f "config/prod.yml" ]; then
          echo "‚úÖ Production config file found"
        else
          echo "‚ùå config/prod.yml not found"
          exit 1
        fi
        
        # Check if deployment scripts exist
        if [ -f "scripts/utils/deploy_tables.py" ]; then
          echo "‚úÖ DDL/Tables deployment script found"
        else
          echo "‚ùå scripts/utils/deploy_tables.py not found"
          exit 1
        fi
        
        if [ -f "scripts/utils/deploy_stored_procedures.py" ]; then
          echo "‚úÖ Stored procedures deployment script found"
        else
          echo "‚ùå scripts/utils/deploy_stored_procedures.py not found"
          exit 1
        fi
        
        # Check if SQL scripts exist
        if [ -d "scripts/prod" ]; then
          echo "üìÅ Checking SQL scripts in different categories:"
          
          # Check DDL scripts
          ddl_count=$(find scripts/prod/ddl -name "*.sql" 2>/dev/null | wc -l)
          echo "  - DDL scripts: $ddl_count"
          
          # Check stored procedure scripts
          sp_count=$(find scripts/prod/stored_procedures -name "*.sql" 2>/dev/null | wc -l)
          echo "  - Stored procedure scripts: $sp_count"
          
          # Check RBAC scripts
          rbac_count=$(find scripts/prod/rbac -name "*.sql" 2>/dev/null | wc -l)
          echo "  - RBAC scripts: $rbac_count"
          
          total_count=$(find scripts/prod -name "*.sql" | wc -l)
          if [ $total_count -gt 0 ]; then
            echo "‚úÖ Found $total_count SQL script(s) for deployment"
          else
            echo "‚ö†Ô∏è No SQL scripts found in scripts/prod/ directory"
          fi
        else
          echo "‚ö†Ô∏è scripts/prod/ directory not found"
        fi

  deploy-ddl-tables:
    needs: pre-deployment-checks
    runs-on: ubuntu-latest
    environment: production
    if: ${{ github.event.inputs.deployment_type == 'full' || github.event.inputs.deployment_type == 'ddl-only' || github.event.inputs.deployment_type == '' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        pip install snowflake-connector-python pyyaml
    
    - name: Deploy DDL and Tables
      env:
        SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
        SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
        SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
        SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
        SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
      run: |
        echo "üöÄ Starting DDL and Tables deployment..."
        python scripts/utils/deploy_tables.py --environment prod

  deploy-stored-procedures:
    needs: [pre-deployment-checks, deploy-ddl-tables]
    runs-on: ubuntu-latest
    environment: production
    if: ${{ always() && (needs.deploy-ddl-tables.result == 'success' || needs.deploy-ddl-tables.result == 'skipped') && (github.event.inputs.deployment_type == 'full' || github.event.inputs.deployment_type == 'procedures-only' || github.event.inputs.deployment_type == '') }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        pip install snowflake-connector-python pyyaml
    
    - name: Deploy Stored Procedures
      env:
        SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
        SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
        SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
        SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
        SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
      run: |
        echo "üöÄ Starting stored procedures deployment..."
        python scripts/utils/deploy_stored_procedures.py --environment prod
    
  post-deployment-validation:
    needs: [deploy-ddl-tables, deploy-stored-procedures]
    runs-on: ubuntu-latest
    environment: production
    if: ${{ always() && github.event.inputs.skip_validation != 'true' && (needs.deploy-stored-procedures.result == 'success' || needs.deploy-stored-procedures.result == 'skipped') }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        pip install snowflake-connector-python pyyaml
    
    - name: Run Basic Validation
      env:
        SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
        SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
        SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
        SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
        SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
      run: |
        echo "üîç Running basic post-deployment validation..."
        python scripts/utils/basic_validator.py --environment prod
    
  deployment-summary:
    needs: [deploy-ddl-tables, deploy-stored-procedures, post-deployment-validation]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Deployment Summary
      run: |
        echo "üìä Production Deployment Summary:"
        echo "================================"
        echo "  - Environment: Production"
        echo "  - Branch: ${{ github.ref_name }}"
        echo "  - Commit: ${{ github.sha }}"
        echo "  - Triggered by: ${{ github.actor }}"
        echo "  - Deployment Type: ${{ github.event.inputs.deployment_type || 'full' }}"
        echo ""
        echo "Job Results:"
        echo "  - DDL/Tables: ${{ needs.deploy-ddl-tables.result }}"
        echo "  - Stored Procedures: ${{ needs.deploy-stored-procedures.result }}"
        echo "  - Validation: ${{ needs.post-deployment-validation.result }}"
        echo ""
        
        # Check overall success
        if [[ "${{ needs.deploy-ddl-tables.result }}" == "success" || "${{ needs.deploy-ddl-tables.result }}" == "skipped" ]] && \
           [[ "${{ needs.deploy-stored-procedures.result }}" == "success" || "${{ needs.deploy-stored-procedures.result }}" == "skipped" ]]; then
          echo "‚úÖ Production deployment completed successfully!"
        else
          echo "‚ùå Production deployment failed!"
          echo "Please check the logs above for details."
          exit 1
        fi